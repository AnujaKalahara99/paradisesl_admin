generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Applicant {
  applicantId                             Int              @id @default(autoincrement())
  reviewedId                              Int?
  applliedDate                            DateTime            @db.Date
  completedDate                           DateTime?           @db.Date
  status                                  String
  reasonForReeject                        String?
  givenName                               String
  surname                                 String
  dateOfBirth                             DateTime            @db.Date
  placeOfBirth                            String
  martialStatus                           String
  photoUrl                                String
  gender                                  String
  passportNo                              String
  passportDateOfExpiry                    DateTime            @db.Date
  passportUrl                             String
  placeOfIssue                            String
  occupation                              String
  email                                   String
  mobileCountryCode                       String
  mobileNo                                String
  whatsappCountryCode                     String
  whatsappNo                              String
  homeAddress                             String
  emergencyConName                        String
  emergencyConCountryCode                 String
  emergencyConNo                          String
  hasVisitedBefore                        Boolean
  lastVisitedDate                         DateTime?           @db.Date
  accomodationUrl                         String?
  returnTicketUrl                         String?
  facebookUrl                             String?
  instagramUrl                            String?
  xUrl                                    String?
  Country_Applicant_placeOfBirthToCountry Country             @relation("Applicant_placeOfBirthToCountry", fields: [placeOfBirth], references: [countryId], onDelete: NoAction, onUpdate: NoAction)
  Country_Applicant_placeOfIssueToCountry Country             @relation("Applicant_placeOfIssueToCountry", fields: [placeOfIssue], references: [countryId], onDelete: NoAction, onUpdate: NoAction)
  Employee                                Employee?           @relation(fields: [reviewedId], references: [employeeId], onDelete: NoAction, onUpdate: NoAction)
  ApplicantEntity                         ApplicantEntity[]
  EntityMember                            EntityMember[]
  PastTravelDetails                       PastTravelDetails[]
}

model ApplicantEntity {
  entityId      Int         @id @default(autoincrement())
  userId        Int?
  mainApplicant Int?
  visaSubCat    String?
  countryId     String?
  purpose       String
  startDate     String
  endDate       String
  placeOfStay   String?
  addressOfStay String?
  cityOfStay    String?
  zipOfStay     String?
  Country       Country?       @relation(fields: [countryId], references: [countryId], onDelete: NoAction, onUpdate: NoAction)
  Applicant     Applicant?     @relation(fields: [mainApplicant], references: [applicantId], onDelete: NoAction, onUpdate: NoAction)
  User          User?          @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  VisaType      VisaType?      @relation(fields: [visaSubCat], references: [visaId], onDelete: NoAction, onUpdate: NoAction)
  EntityMember  EntityMember[]
}

model Country {
  countryId                                 String               @id
  name                                      String
  countryCode                               String
  nationality                               String
  Applicant_Applicant_placeOfBirthToCountry Applicant[]          @relation("Applicant_placeOfBirthToCountry")
  Applicant_Applicant_placeOfIssueToCountry Applicant[]          @relation("Applicant_placeOfIssueToCountry")
  ApplicantEntity                           ApplicantEntity[]
  CountryGroupMember                        CountryGroupMember[]
  PastTravelDetails                         PastTravelDetails[]
}

model CountryGroup {
  countryGrpId        Int                   @id @default(autoincrement())
  title               String
  description         String
  CountryGroupMember  CountryGroupMember[]
  VisaCountryGroupFee VisaCountryGroupFee[]
}

model CountryGroupMember {
  countryGrpId Int
  countryId    String
  CountryGroup CountryGroup @relation(fields: [countryGrpId], references: [countryGrpId], onDelete: NoAction, onUpdate: NoAction)
  Country      Country      @relation(fields: [countryId], references: [countryId], onDelete: NoAction, onUpdate: NoAction)

  @@id([countryGrpId, countryId])
}

model Employee {
  employeeId  Int         @id @default(autoincrement())
  firstName   String
  lastName    String
  password    String 
  nic         String
  position    String
  isAdmin     Boolean
  dateOfBirth DateTime    @db.Date
  Applicant   Applicant[]
}

model EntityMember {
  entityId        Int
  applicantId     Int
  relation        String?
  Applicant       Applicant       @relation(fields: [applicantId], references: [applicantId], onDelete: NoAction, onUpdate: NoAction)
  ApplicantEntity ApplicantEntity @relation(fields: [entityId], references: [entityId], onDelete: NoAction, onUpdate: NoAction)

  @@id([entityId, applicantId])
}

model FreeVisaCountry {
  countryId  String
  visaTypeId String

  @@id([countryId, visaTypeId])
}

model PastTravelDetails {
  applicantId        Int
  destinationCountry String
  visitedDate        DateTime  @db.Date
  proofUrl           String
  purpose            String?
  Applicant          Applicant @relation(fields: [applicantId], references: [applicantId], onDelete: NoAction, onUpdate: NoAction)
  Country            Country   @relation(fields: [destinationCountry], references: [countryId], onDelete: NoAction, onUpdate: NoAction)

  @@id([applicantId, destinationCountry, visitedDate])
}

model RefreshTokens {
  token     String    @id
  createdAt DateTime? @db.Date
  userId    Int?
  UserCred  UserCred? @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "RefreshTokens_fkey")

  @@index([userId], map: "fki_s")
}

model User {
  userId          Int               @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String
  countryCode     String?
  contactNo       String?
  countryId       String?
  ApplicantEntity ApplicantEntity[]
  UserCred        UserCred          @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
}

model UserCred {
  userId        Int             @id(map: "userCredPrimary") @default(autoincrement())
  email         String          @unique(map: "emailUnique")
  password      String
  RefreshTokens RefreshTokens[]
  User          User?
}

model VisaCountryGroupFee {
  subCatId     String
  countryGrpId Int
  fee          Decimal?     @db.Decimal(10, 2)
  CountryGroup CountryGroup @relation(fields: [countryGrpId], references: [countryGrpId], onDelete: NoAction, onUpdate: NoAction)
  VisaType     VisaType     @relation(fields: [subCatId], references: [visaId], onDelete: NoAction, onUpdate: NoAction)

  @@id([subCatId, countryGrpId])
}

model VisaType {
  visaId              String                @id
  title               String
  entryType           String
  baseFee             Decimal               @db.Decimal(10, 2)
  description         String
  multiEntryLimitDays Int?
  period              String
  duration            Int
  extensionDetails    String
  ApplicantEntity     ApplicantEntity[]
  VisaCountryGroupFee VisaCountryGroupFee[]
}
